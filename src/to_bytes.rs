use plist::{Data, Date, Dictionary, Error, Integer, Uid, Value};

/// The formats a plist can be serialized to.
pub enum PlistFormat {
    XML,
    Binary,
}

pub trait ToBytes {
    /// Serializes `self` to a plist with the specified format.
    ///
    /// # Examples
    ///
    /// ```rs
    /// use plist_ext::{Dictionary, DictionaryExt, ToBytes, PlistFormat};
    ///
    /// let mut dict = Dictionary::new();
    /// dict.add("key", "value");
    /// std::fs::write("./dict_xml", dict.to_bytes(PlistFormat::XML)).unwrap();
    /// std::fs::write("./dict_binary", dict.to_bytes(PlistFormat::Binary)).unwrap();
    /// ```
    fn to_bytes(&self, format: PlistFormat) -> Result<Vec<u8>, Error>;
}

macro_rules! impl_to_bytes {
    ($type:tt) => {
        impl ToBytes for $type {
            fn to_bytes(&self, format: PlistFormat) -> Result<Vec<u8>, Error> {
                let mut bytes = vec![];
                match format {
                    PlistFormat::XML => plist::to_writer_xml(&mut bytes, &self)?,
                    PlistFormat::Binary => plist::to_writer_binary(&mut bytes, &self)?,
                };
                Ok(bytes)
            }
        }
    };
}

impl_to_bytes!(Data);
impl_to_bytes!(Date);
impl_to_bytes!(Dictionary);
impl_to_bytes!(Integer);
impl_to_bytes!(Value);
impl_to_bytes!(Uid);

#[cfg(test)]
mod tests {
    use plist::{Data, Date, Dictionary, Integer, Uid, Value};

    use crate::{DictionaryExt, PlistFormat, ToBytes};

    macro_rules! test_impl {
        ($type:expr, $name:ident, $output_xml:literal, $output_binary:literal) => {
            #[test]
            fn $name() {
                let plist = $type;

                // to help with adding new types (the assert failure output can be passed to convert_bytes.py)
                assert_eq!(
                    format!("{:x?}", plist.to_bytes(PlistFormat::XML)),
                    format!("{:x?}", $output_xml),
                );
                assert_eq!(
                    format!("{:x?}", plist.to_bytes(PlistFormat::Binary)),
                    format!("{:x?}", $output_binary),
                );

                assert_eq!(plist.to_bytes(PlistFormat::XML), $output_xml);
                assert_eq!(plist.to_bytes(PlistFormat::Binary), $output_binary);
            }
        };
    }

    test_impl!(
        Data::new(vec![0u8, 0u8, 0u8, 0u8]),
        data,
        b"\x3c\x3f\x78\x6d\x6c\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x20\x65\x6e\x63\x6f\x64\x69\x6e\x67\x3d\x22\x55\x54\x46\x2d\x38\x22\x3f\x3e\x0a\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x70\x6c\x69\x73\x74\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x41\x70\x70\x6c\x65\x2f\x2f\x44\x54\x44\x20\x50\x4c\x49\x53\x54\x20\x31\x2e\x30\x2f\x2f\x45\x4e\x22\x20\x22\x68\x74\x74\x70\x3a\x2f\x2f\x77\x77\x77\x2e\x61\x70\x70\x6c\x65\x2e\x63\x6f\x6d\x2f\x44\x54\x44\x73\x2f\x50\x72\x6f\x70\x65\x72\x74\x79\x4c\x69\x73\x74\x2d\x31\x2e\x30\x2e\x64\x74\x64\x22\x3e\x0a\x3c\x70\x6c\x69\x73\x74\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x3e\x0a\x3c\x64\x61\x74\x61\x3e\x0a\x41\x41\x41\x41\x41\x41\x3d\x3d\x0a\x3c\x2f\x64\x61\x74\x61\x3e\x0a\x3c\x2f\x70\x6c\x69\x73\x74\x3e",
        b"\x62\x70\x6c\x69\x73\x74\x30\x30\x44\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d"
    );

    test_impl!(
        Date::from_xml_format("1981-05-16T11:32:06Z").unwrap(),
        date,
        b"\x3c\x3f\x78\x6d\x6c\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x20\x65\x6e\x63\x6f\x64\x69\x6e\x67\x3d\x22\x55\x54\x46\x2d\x38\x22\x3f\x3e\x0a\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x70\x6c\x69\x73\x74\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x41\x70\x70\x6c\x65\x2f\x2f\x44\x54\x44\x20\x50\x4c\x49\x53\x54\x20\x31\x2e\x30\x2f\x2f\x45\x4e\x22\x20\x22\x68\x74\x74\x70\x3a\x2f\x2f\x77\x77\x77\x2e\x61\x70\x70\x6c\x65\x2e\x63\x6f\x6d\x2f\x44\x54\x44\x73\x2f\x50\x72\x6f\x70\x65\x72\x74\x79\x4c\x69\x73\x74\x2d\x31\x2e\x30\x2e\x64\x74\x64\x22\x3e\x0a\x3c\x70\x6c\x69\x73\x74\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x3e\x0a\x3c\x64\x61\x74\x65\x3e\x31\x39\x38\x31\x2d\x30\x35\x2d\x31\x36\x54\x31\x31\x3a\x33\x32\x3a\x30\x36\x5a\x3c\x2f\x64\x61\x74\x65\x3e\x0a\x3c\x2f\x70\x6c\x69\x73\x74\x3e",
        b"\x62\x70\x6c\x69\x73\x74\x30\x30\x33\xc1\xc2\x76\x00\x65\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11"
    );

    test_impl!(
        Dictionary::with([("integer", 1.into()), ("string", "value".into())]),
        dictionary,
        b"\x3c\x3f\x78\x6d\x6c\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x20\x65\x6e\x63\x6f\x64\x69\x6e\x67\x3d\x22\x55\x54\x46\x2d\x38\x22\x3f\x3e\x0a\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x70\x6c\x69\x73\x74\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x41\x70\x70\x6c\x65\x2f\x2f\x44\x54\x44\x20\x50\x4c\x49\x53\x54\x20\x31\x2e\x30\x2f\x2f\x45\x4e\x22\x20\x22\x68\x74\x74\x70\x3a\x2f\x2f\x77\x77\x77\x2e\x61\x70\x70\x6c\x65\x2e\x63\x6f\x6d\x2f\x44\x54\x44\x73\x2f\x50\x72\x6f\x70\x65\x72\x74\x79\x4c\x69\x73\x74\x2d\x31\x2e\x30\x2e\x64\x74\x64\x22\x3e\x0a\x3c\x70\x6c\x69\x73\x74\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x3e\x0a\x3c\x64\x69\x63\x74\x3e\x0a\x09\x3c\x6b\x65\x79\x3e\x69\x6e\x74\x65\x67\x65\x72\x3c\x2f\x6b\x65\x79\x3e\x0a\x09\x3c\x69\x6e\x74\x65\x67\x65\x72\x3e\x31\x3c\x2f\x69\x6e\x74\x65\x67\x65\x72\x3e\x0a\x09\x3c\x6b\x65\x79\x3e\x73\x74\x72\x69\x6e\x67\x3c\x2f\x6b\x65\x79\x3e\x0a\x09\x3c\x73\x74\x72\x69\x6e\x67\x3e\x76\x61\x6c\x75\x65\x3c\x2f\x73\x74\x72\x69\x6e\x67\x3e\x0a\x3c\x2f\x64\x69\x63\x74\x3e\x0a\x3c\x2f\x70\x6c\x69\x73\x74\x3e",
        b"\x62\x70\x6c\x69\x73\x74\x30\x30\xd2\x01\x02\x03\x04\x57\x69\x6e\x74\x65\x67\x65\x72\x56\x73\x74\x72\x69\x6e\x67\x10\x01\x55\x76\x61\x6c\x75\x65\x08\x0d\x15\x1c\x1e\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24"
    );

    test_impl!(
        Integer::from(123),
        integer,
        b"\x3c\x3f\x78\x6d\x6c\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x20\x65\x6e\x63\x6f\x64\x69\x6e\x67\x3d\x22\x55\x54\x46\x2d\x38\x22\x3f\x3e\x0a\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x70\x6c\x69\x73\x74\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x41\x70\x70\x6c\x65\x2f\x2f\x44\x54\x44\x20\x50\x4c\x49\x53\x54\x20\x31\x2e\x30\x2f\x2f\x45\x4e\x22\x20\x22\x68\x74\x74\x70\x3a\x2f\x2f\x77\x77\x77\x2e\x61\x70\x70\x6c\x65\x2e\x63\x6f\x6d\x2f\x44\x54\x44\x73\x2f\x50\x72\x6f\x70\x65\x72\x74\x79\x4c\x69\x73\x74\x2d\x31\x2e\x30\x2e\x64\x74\x64\x22\x3e\x0a\x3c\x70\x6c\x69\x73\x74\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x3e\x0a\x3c\x69\x6e\x74\x65\x67\x65\x72\x3e\x31\x32\x33\x3c\x2f\x69\x6e\x74\x65\x67\x65\x72\x3e\x0a\x3c\x2f\x70\x6c\x69\x73\x74\x3e",
        b"\x62\x70\x6c\x69\x73\x74\x30\x30\x10\x7b\x08\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a"
    );

    // uid is not supported in XML plists; it's easier to just not support it

    test_impl!(
        Value::from(123),
        value,
        b"\x3c\x3f\x78\x6d\x6c\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x20\x65\x6e\x63\x6f\x64\x69\x6e\x67\x3d\x22\x55\x54\x46\x2d\x38\x22\x3f\x3e\x0a\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x70\x6c\x69\x73\x74\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x41\x70\x70\x6c\x65\x2f\x2f\x44\x54\x44\x20\x50\x4c\x49\x53\x54\x20\x31\x2e\x30\x2f\x2f\x45\x4e\x22\x20\x22\x68\x74\x74\x70\x3a\x2f\x2f\x77\x77\x77\x2e\x61\x70\x70\x6c\x65\x2e\x63\x6f\x6d\x2f\x44\x54\x44\x73\x2f\x50\x72\x6f\x70\x65\x72\x74\x79\x4c\x69\x73\x74\x2d\x31\x2e\x30\x2e\x64\x74\x64\x22\x3e\x0a\x3c\x70\x6c\x69\x73\x74\x20\x76\x65\x72\x73\x69\x6f\x6e\x3d\x22\x31\x2e\x30\x22\x3e\x0a\x3c\x69\x6e\x74\x65\x67\x65\x72\x3e\x31\x32\x33\x3c\x2f\x69\x6e\x74\x65\x67\x65\x72\x3e\x0a\x3c\x2f\x70\x6c\x69\x73\x74\x3e",
        b""
    );
}
